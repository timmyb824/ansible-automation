---
- name: Check if one-updater is installed (system path)
  ansible.builtin.command: which one-updater
  register: one_updater_check_system
  ignore_errors: true
  changed_when: false

- name: Check if one-updater is installed (uv path)
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.local/bin/one-updater"
  register: one_updater_check_uv

- name: Set one-updater installation status
  ansible.builtin.set_fact:
    one_updater_installed: "{{ one_updater_check_system.rc == 0 or one_updater_check_uv.stat.exists | default(false) }}"

- name: Display Darwin installation message
  ansible.builtin.debug:
    msg: "Please install one-updater using uv: 'uv tool install one-updater'"
  when:
    - ansible_system == 'Darwin'
    - not one_updater_installed

- name: Install uv if needed
  when:
    - not one_updater_installed
    - ansible_system == 'Linux'
  block:
    - name: Install uv
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          curl -LsSf https://astral.sh/uv/install.sh | sh
      args:
        creates: "{{ ansible_env.HOME }}/.local/bin/uv"
        executable: /bin/bash
      register: uv_install
      changed_when: uv_install.rc == 0

    - name: Verify uv installation
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.local/bin/uv"
      register: uv_check
      failed_when: not uv_check.stat.exists

    - name: Install one-updater via uv
      ansible.builtin.shell: |
        export PATH="{{ ansible_env.HOME }}/.local/bin:$PATH"
        uv tool install one-updater
      args:
        executable: /bin/bash
      register: one_updater_install
      changed_when: one_updater_install.rc == 0
      when: uv_check.stat.exists

- name: Set installation success fact
  ansible.builtin.set_fact:
    install_success: "{{ one_updater_installed or (one_updater_install.changed | default(false)) }}"

- name: Ensure config directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/one-updater"
    state: directory
  when: install_success

- name: Check if config file exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.config/one-updater/config.yaml"
  register: config_check
  when: install_success

- name: Initialize one-updater if no config exists
  ansible.builtin.shell: |
    export PATH="{{ ansible_env.HOME }}/.local/bin:$PATH"
    one-updater init
  args:
    executable: /bin/bash
  when:
    - install_success
    - not config_check.stat.exists | default(true)
  changed_when: false

- name: Run one-updater update
  become: true
  become_user: "{{ ansible_user_id }}"
  ansible.builtin.shell: |
    export PATH="{{ ansible_env.HOME }}/.local/bin:$PATH"
    one-updater update
  args:
    executable: /bin/bash
  when:
    - install_success
    - run_update | default(false) | bool
  changed_when: false

- name: Run one-updater upgrade
  become: true
  become_user: "{{ ansible_user_id }}"
  ansible.builtin.shell: |
    export PATH="{{ ansible_env.HOME }}/.local/bin:$PATH"
    one-updater upgrade
  args:
    executable: /bin/bash
  when:
    - install_success
    - run_upgrade | default(false) | bool
  changed_when: false
