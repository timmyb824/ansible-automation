---
- name: Check if cargo is installed
  ansible.builtin.command: which cargo
  register: cargo_check
  failed_when: false
  changed_when: false
  environment:
    PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"

- name: Set cargo environment
  ansible.builtin.set_fact:
    cargo_env:
      PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"
      CARGO_HOME: "{{ ansible_env.HOME }}/.cargo"
      RUSTUP_HOME: "{{ ansible_env.HOME }}/.rustup"
      CARGO_INCREMENTAL: "{{ 1 if cargo_incremental | default(true) else 0 }}"
      RUSTC_WRAPPER: "{{ 'sccache' if cargo_use_sccache | default(false) else '' }}"
      CARGO_BUILD_JOBS: "{{ ansible_processor_vcpus }}"

- name: Source cargo environment
  ansible.builtin.shell: |
    source "$HOME/.cargo/env"
    cargo --version
  args:
    executable: /bin/bash
  register: source_cargo
  failed_when: false
  changed_when: false
  when: cargo_check.rc != 0 and ansible_os_family != "Darwin"

- name: Verify cargo is available
  ansible.builtin.shell: cargo --version
  register: cargo_version
  environment: "{{ cargo_env }}"
  failed_when: cargo_version.rc != 0
  changed_when: false
  when: cargo_check.rc != 0 and source_cargo.rc == 0

- name: Log cargo installation status
  ansible.builtin.debug:
    msg: "Cargo is not installed and environment sourcing failed - installation will be skipped"
  when: cargo_check.rc != 0 and (source_cargo.rc != 0 or source_cargo is not defined)

- name: Fetch cargo package list
  ansible.builtin.uri:
    url: "https://gist.githubusercontent.com/timmyb824/807597f33b14eceeb26e4e6f81d45962/raw/cargo_{{ ansible_system | lower }}.list"
    return_content: true
    validate_certs: true
    method: GET
  register: package_list
  delegate_to: localhost
  run_once: true
  when: cargo_check.rc == 0 or source_cargo.rc == 0

- name: Parse package list
  ansible.builtin.set_fact:
    # cargo_packages: "{{ package_list.content.split('\n') | select('match', '^[^#]') | list }}"
    cargo_packages: "{{ package_list.content.split('\n') | map('trim') | reject('search', '^#') | map('split', '#') | map('first') | map('trim') | reject('equalto', '') | list }}"
  when: package_list is defined and package_list.content is defined

- name: Debug cargo packages
  ansible.builtin.debug:
    msg: |
      Architecture: {{ ansible_architecture }}
      System: {{ ansible_system }}
      Cargo packages: {{ cargo_packages | default([]) }}
      Zellij in packages: {{ 'zellij' in (cargo_packages | default([]) | map('regex_replace', '^--locked\\s+', '') | list) }}
  when: cargo_check.rc == 0 or source_cargo.rc == 0

- name: Install standard cargo packages
  ansible.builtin.shell: "cargo install {{ '--jobs=' + cargo_jobs | string if cargo_parallel_install | default(false) else '' }} {{ item }}"
  register: cargo_install
  loop: "{{ cargo_packages | default([]) | select('match', '^(?!--git|--locked).*$') | reject('search', 'zellij') | list if (ansible_architecture == 'aarch64' and ansible_system == 'Linux') else cargo_packages | default([]) | select('match', '^(?!--git|--locked).*$') | list }}"
  environment: "{{ cargo_env }}"
  changed_when: "cargo_install.rc == 0 and 'error: package `' ~ item ~ '` is already installed' not in cargo_install.stderr"
  failed_when: >
    cargo_install.rc != 0 and
    'error: package `' ~ item ~ '` is already installed' not in cargo_install.stderr
  when: cargo_check.rc == 0 or source_cargo.rc == 0

- name: Install git-based cargo packages
  ansible.builtin.shell: "cargo install {{ '--jobs=' + cargo_jobs | string if cargo_parallel_install | default(false) else '' }} --git {{ item | regex_replace('^--git\\s+', '') }}"
  register: cargo_git_install
  loop: "{{ cargo_packages | default([]) | select('match', '^--git') | list }}"
  environment: "{{ cargo_env }}"
  changed_when: "cargo_git_install.rc == 0 and 'error: package is already installed' not in cargo_git_install.stderr"
  failed_when: >
    cargo_git_install.rc != 0 and
    'error: package is already installed' not in cargo_git_install.stderr
  when: cargo_packages is defined

- name: Install locked cargo packages
  ansible.builtin.shell: "cargo install {{ '--jobs=' + cargo_jobs | string if cargo_parallel_install | default(false) else '' }} {{ item }}"
  register: cargo_locked_install
  loop: "{{ cargo_packages | default([]) | select('match', '^--locked') | reject('search', 'zellij') | list if (ansible_architecture == 'aarch64' and ansible_system == 'Linux') else cargo_packages | default([]) | select('match', '^--locked') | list }}"
  environment: "{{ cargo_env }}"
  changed_when: "cargo_locked_install.rc == 0 and 'error: package `' ~ item | regex_replace('^--locked\\s+', '') ~ '` is already installed' not in cargo_locked_install.stderr"
  failed_when: >
    cargo_locked_install.rc != 0 and
    'error: package `' ~ item | regex_replace('^--locked\\s+', '') ~ '` is already installed' not in cargo_locked_install.stderr
  when: cargo_check.rc == 0 or source_cargo.rc == 0

- name: Log successful standard installations
  ansible.builtin.debug:
    msg: "Successfully installed package: {{ item.item }}"
  loop: "{{ cargo_install.results }}"
  when:
    - cargo_install is defined
    - item.rc == 0
    - "'error: package `' ~ item.item ~ '` is already installed' not in item.stderr"

- name: Log successful git installations
  ansible.builtin.debug:
    msg: "Successfully installed git package: {{ item.item }}"
  loop: "{{ cargo_git_install.results }}"
  when:
    - cargo_git_install is defined
    - item.rc == 0
    - "'error: package is already installed' not in item.stderr"

- name: Log successful locked installations
  ansible.builtin.debug:
    msg: "Successfully installed locked package: {{ item.item }}"
  loop: "{{ cargo_locked_install.results }}"
  when:
    - cargo_locked_install is defined
    - item.rc == 0
    - "'error: package is already installed' not in item.stderr"

- name: Log failed installations
  ansible.builtin.debug:
    msg: "Failed to install package: {{ item.item }} (Error: {{ item.stderr }})"
  loop: "{{ cargo_install.results + cargo_git_install.results + cargo_locked_install.results }}"
  when:
    - item.rc != 0
    - "'error: package is already installed' not in item.stderr"
    - "'error: package `' ~ item.item ~ '` is already installed' not in item.stderr"
