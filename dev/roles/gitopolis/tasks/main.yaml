---
- name: Check if gitopolis is installed
  ansible.builtin.command: which gitopolis
  register: gitopolis_check
  changed_when: false
  failed_when: false

- name: Install on MacOS
  when:
    - ansible_system == 'Darwin'
    - gitopolis_check.rc != 0
    - gitopolis_state != 'absent'
  block:
    - name: Check if pkgm is available
      ansible.builtin.command: which pkgm
      register: pkgm_check
      failed_when: false
      changed_when: false

    - name: Install gitopolis on MacOS
      ansible.builtin.command: pkgm install gitopolis
      when: pkgm_check.rc == 0

- name: Install gitopolis on Linux x86_64
  when:
    - ansible_system == 'Linux'
    - ansible_architecture == 'x86_64'
    - gitopolis_check.rc != 0
    - gitopolis_state != 'absent'
  block:
    - name: Create temporary directory for gitopolis
      ansible.builtin.tempfile:
        state: directory
        suffix: gitopolis
      register: temp_dir

    - name: Get latest gitopolis release URL
      ansible.builtin.uri:
        url: https://api.github.com/repos/timabell/gitopolis/releases/latest
        return_content: true
      register: latest_release
      retries: 3
      delay: 5
      until: latest_release is success

    - name: Get matching release assets
      ansible.builtin.set_fact:
        matching_assets: >-
          {{ latest_release.json.assets |
             selectattr('name', 'regex', 'gitopolis-linux-x86_64\.tar\.gz') |
             map(attribute='browser_download_url') |
             list }}

    - name: Fail if no matching release found
      ansible.builtin.fail:
        msg: "No matching gitopolis release found for Linux x86_64"
      when: matching_assets | length == 0

    - name: Set release asset URL
      ansible.builtin.set_fact:
        asset_url: "{{ matching_assets[0] }}"

    - name: Download gitopolis release
      ansible.builtin.get_url:
        url: "{{ asset_url }}"
        dest: "{{ temp_dir.path }}/gitopolis.tar.gz"
        mode: "0644"
      register: download_result
      retries: 3
      delay: 5
      until: download_result is success

    - name: Extract gitopolis archive
      ansible.builtin.unarchive:
        src: "{{ temp_dir.path }}/gitopolis.tar.gz"
        dest: "{{ temp_dir.path }}"
        remote_src: true

    - name: Install gitopolis binary
      ansible.builtin.copy:
        src: "{{ temp_dir.path }}/gitopolis"
        dest: "/usr/local/bin/gitopolis"
        mode: "0755"
        remote_src: true
      become: true

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent
      when: temp_dir.path is defined
  rescue:
    - name: Clean up temporary directory on failure
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent
      when: temp_dir.path is defined

    - name: Fail with error message
      ansible.builtin.fail:
        msg: "Failed to install gitopolis. Please check the error messages above."

- name: Check if .gitopolis.toml exists
  ansible.builtin.stat:
    path: "{{ gitopolis_config_path }}/.gitopolis.toml"
  register: config_file

- name: Log if .gitopolis.toml is not found
  ansible.builtin.debug:
    msg: "Skipping gitopolis role - No .gitopolis.toml file found at {{ gitopolis_config_path }}"
  when: not config_file.stat.exists

- name: Clone repositories with gitopolis
  ansible.builtin.command: gitopolis clone
  args:
    chdir: "{{ gitopolis_config_path }}"
  register: gitopolis_clone
  changed_when: gitopolis_clone.rc == 0
  failed_when: gitopolis_clone.rc != 0
  retries: 3
  delay: 5
  until: gitopolis_clone is success
  when:
    - gitopolis_state != 'absent'
    - config_file.stat.exists
    - gitopolis_check.rc == 0 # Only if gitopolis is installed
