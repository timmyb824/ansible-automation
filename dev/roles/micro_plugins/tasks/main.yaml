---
- name: Include OS-specific tasks
  ansible.builtin.include_tasks: "{{ ansible_os_family | lower }}.yaml"

- name: Fetch package list from gist
  become: false
  ansible.builtin.uri:
    url: "{{ gist_base_url }}/micro_plugins.list"
    return_content: yes
    validate_certs: yes
    method: GET
  register: package_list
  delegate_to: localhost
  run_once: true

- name: Parse package list
  become: false
  ansible.builtin.set_fact:
    micro_plugins: "{{ package_list.content | regex_replace('#.*$', '') | split('\n') | select('regex', '^\\S+$') | list }}"

- name: Get list of installed plugins
  ansible.builtin.shell: |
    {% if ansible_os_family == "Darwin" %}
    eval "$(/opt/homebrew/bin/brew shellenv)"
    export PATH="/opt/homebrew/bin:$PATH"
    {% endif %}
    micro -plugin list
  register: installed_plugins
  changed_when: false
  environment:
    PATH: "{{ '/opt/homebrew/bin:' + ansible_env.PATH if ansible_os_family == 'Darwin' else ansible_env.PATH }}"

- name: Install Micro plugins
  ansible.builtin.shell: |
    {% if ansible_os_family == "Darwin" %}
    eval "$(/opt/homebrew/bin/brew shellenv)"
    export PATH="/opt/homebrew/bin:$PATH"
    {% endif %}
    micro -plugin install {{ item }}
  register: plugin_install
  changed_when: plugin_install.rc == 0
  failed_when:
    - plugin_install.rc != 0
    - "'already installed' not in plugin_install.stderr"
  loop: "{{ micro_plugins }}"
  when:
    - item | trim != ''
    - item not in installed_plugins.stdout
    - micro_plugins_state != 'absent'
  environment:
    PATH: "{{ '/opt/homebrew/bin:' + ansible_env.PATH if ansible_os_family == 'Darwin' else ansible_env.PATH }}"

- name: Update Micro plugins
  ansible.builtin.shell: |
    {% if ansible_os_family == "Darwin" %}
    eval "$(/opt/homebrew/bin/brew shellenv)"
    export PATH="/opt/homebrew/bin:$PATH"
    {% endif %}
    micro -plugin update {{ item }}
  register: plugin_update
  changed_when: plugin_update.rc == 0
  failed_when:
    - plugin_update.rc != 0
    - "'up to date' not in plugin_update.stderr"
  loop: "{{ micro_plugins }}"
  when:
    - item | trim != ''
    - item in installed_plugins.stdout
    - micro_plugins_state == 'latest'
  environment:
    PATH: "{{ '/opt/homebrew/bin:' + ansible_env.PATH if ansible_os_family == 'Darwin' else ansible_env.PATH }}"
