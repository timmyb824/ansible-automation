---
- hosts: pve
  gather_facts: no
  name: "create VM template"
  vars:
    vm:
      # cloud_image_url: https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img
      cloud_image_url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
      cloud_image_path: /tmp/ubuntu-2204-server-amd64.qcow2
      template_id: 4301
      template_name: ubuntu-2204-cloudinit-template
      template_memory: 512
      template_cores: 2
      storage: local-zfs3
  tasks:
    - name: Check if template already exists
      shell: qm list | grep "{{ vm.template_id }}"
      register: template_exists
      ignore_errors: true
      changed_when: false
      become: yes

    - name: Stop existing template if it exists
      command: "qm stop {{ vm.template_id }}"
      when: template_exists.rc == 0
      ignore_errors: true
      become: yes

    - name: Remove existing template if it exists
      command: "qm destroy {{ vm.template_id }}"
      when: template_exists.rc == 0
      become: yes

    - name: Verify storage pool exists
      shell: "pvesm status | grep {{ vm.storage }}"
      register: storage_exists
      failed_when: storage_exists.rc != 0
      changed_when: false
      become: yes

    - name: download cloud image
      get_url:
        url: "{{ vm.cloud_image_url }}"
        dest: "{{ vm.cloud_image_path }}"
        mode: 0700
      register: download_result
      failed_when: download_result.failed

    - name: create a VM to use as a template
      command: "qm create {{ vm.template_id }} --name {{ vm.template_name }} --memory {{ vm.template_memory }} --cores {{ vm.template_cores }} --net0 virtio,bridge=vmbr0"
      become: yes
      register: create_result
      failed_when:
        - create_result.rc != 0
        - "'already exists' not in create_result.stderr"

    - name: import disk image
      command: "qm importdisk {{ vm.template_id }} {{ vm.cloud_image_path }} {{ vm.storage }}"
      become: yes
      register: import_result
      failed_when: import_result.rc != 0

    - name: configure VM to use imported image
      command: "qm set {{ vm.template_id }} --scsihw virtio-scsi-pci --scsi0 {{ vm.storage }}:vm-{{ vm.template_id }}-disk-0"
      become: yes
      register: config_result
      failed_when: config_result.rc != 0

    - name: add cloud-init image as CDROM
      command: "qm set {{ vm.template_id }} --ide2 {{ vm.storage }}:cloudinit"
      become: yes
      register: cloudinit_result
      failed_when: cloudinit_result.rc != 0

    - name: configure boot from the image
      command: "qm set {{ vm.template_id }} --boot c --bootdisk scsi0"
      become: yes
      register: boot_result
      failed_when: boot_result.rc != 0

    - name: attach serial console
      command: "qm set {{ vm.template_id }} --serial0 socket --vga serial0"
      become: yes
      register: console_result
      failed_when: console_result.rc != 0

    - name: create template
      command: "qm template {{ vm.template_id }}"
      become: yes
      register: template_result
      failed_when: template_result.rc != 0

    - name: Verify template creation
      shell: "qm status {{ vm.template_id }}"
      register: template_status
      failed_when: template_status.rc != 0
      changed_when: false
      become: yes

    - name: Remove downloaded cloud image
      file:
        path: "{{ vm.cloud_image_path }}"
        state: absent
      when: cleanup_downloads | default(true)

    - name: Show success message
      debug:
        msg: "Template {{ vm.template_name }} (ID: {{ vm.template_id }}) has been successfully created!"
      when: template_status.rc == 0
